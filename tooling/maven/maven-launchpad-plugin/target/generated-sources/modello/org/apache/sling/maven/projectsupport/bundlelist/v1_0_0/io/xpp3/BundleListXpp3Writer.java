/*
 =================== DO NOT EDIT THIS FILE ====================
 Generated by Modello 1.1 on 2014-04-28 08:35:30,
 any modifications will be overwritten.
 ==============================================================
 */

package org.apache.sling.maven.projectsupport.bundlelist.v1_0_0.io.xpp3;

  //---------------------------------/
 //- Imported classes and packages -/
//---------------------------------/

import java.io.Writer;
import java.text.DateFormat;
import java.util.Iterator;
import java.util.Locale;
import org.apache.sling.maven.projectsupport.bundlelist.v1_0_0.Bundle;
import org.apache.sling.maven.projectsupport.bundlelist.v1_0_0.BundleList;
import org.apache.sling.maven.projectsupport.bundlelist.v1_0_0.StartLevel;
import org.codehaus.plexus.util.xml.pull.MXSerializer;
import org.codehaus.plexus.util.xml.pull.XmlSerializer;

/**
 * Class BundleListXpp3Writer.
 * 
 * @version $Revision$ $Date$
 */
@SuppressWarnings( "all" )
public class BundleListXpp3Writer
{

      //--------------------------/
     //- Class/Member Variables -/
    //--------------------------/

    /**
     * Field NAMESPACE.
     */
    private static final String NAMESPACE = null;


      //-----------/
     //- Methods -/
    //-----------/

    /**
     * Method write.
     * 
     * @param writer
     * @param bundleList
     * @throws java.io.IOException
     */
    public void write( Writer writer, BundleList bundleList )
        throws java.io.IOException
    {
        XmlSerializer serializer = new MXSerializer();
        serializer.setProperty( "http://xmlpull.org/v1/doc/properties.html#serializer-indentation", "  " );
        serializer.setProperty( "http://xmlpull.org/v1/doc/properties.html#serializer-line-separator", "\n" );
        serializer.setOutput( writer );
        serializer.startDocument( bundleList.getModelEncoding(), null );
        writeBundleList( bundleList, "bundles", serializer );
        serializer.endDocument();
    } //-- void write( Writer, BundleList )

    /**
     * Method writeBundle.
     * 
     * @param bundle
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     */
    private void writeBundle( Bundle bundle, String tagName, XmlSerializer serializer )
        throws java.io.IOException
    {
        if ( bundle != null )
        {
            serializer.startTag( NAMESPACE, tagName );
            if ( bundle.getGroupId() != null )
            {
                serializer.startTag( NAMESPACE, "groupId" ).text( bundle.getGroupId() ).endTag( NAMESPACE, "groupId" );
            }
            if ( bundle.getArtifactId() != null )
            {
                serializer.startTag( NAMESPACE, "artifactId" ).text( bundle.getArtifactId() ).endTag( NAMESPACE, "artifactId" );
            }
            if ( bundle.getVersion() != null )
            {
                serializer.startTag( NAMESPACE, "version" ).text( bundle.getVersion() ).endTag( NAMESPACE, "version" );
            }
            if ( ( bundle.getType() != null ) && !bundle.getType().equals( "jar" ) )
            {
                serializer.startTag( NAMESPACE, "type" ).text( bundle.getType() ).endTag( NAMESPACE, "type" );
            }
            if ( bundle.getClassifier() != null )
            {
                serializer.startTag( NAMESPACE, "classifier" ).text( bundle.getClassifier() ).endTag( NAMESPACE, "classifier" );
            }
            if ( bundle.getStartLevel() != 0 )
            {
                serializer.startTag( NAMESPACE, "startLevel" ).text( String.valueOf( bundle.getStartLevel() ) ).endTag( NAMESPACE, "startLevel" );
            }
            if ( bundle.getRunModes() != null )
            {
                serializer.startTag( NAMESPACE, "runModes" ).text( bundle.getRunModes() ).endTag( NAMESPACE, "runModes" );
            }
            serializer.endTag( NAMESPACE, tagName );
        }
    } //-- void writeBundle( Bundle, String, XmlSerializer )

    /**
     * Method writeBundleList.
     * 
     * @param bundleList
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     */
    private void writeBundleList( BundleList bundleList, String tagName, XmlSerializer serializer )
        throws java.io.IOException
    {
        if ( bundleList != null )
        {
            serializer.startTag( NAMESPACE, tagName );
            if ( ( bundleList.getStartLevels() != null ) && ( bundleList.getStartLevels().size() > 0 ) )
            {
                for ( Iterator iter = bundleList.getStartLevels().iterator(); iter.hasNext(); )
                {
                    StartLevel o = (StartLevel) iter.next();
                    writeStartLevel( o, "startLevel", serializer );
                }
            }
            serializer.endTag( NAMESPACE, tagName );
        }
    } //-- void writeBundleList( BundleList, String, XmlSerializer )

    /**
     * Method writeStartLevel.
     * 
     * @param startLevel
     * @param serializer
     * @param tagName
     * @throws java.io.IOException
     */
    private void writeStartLevel( StartLevel startLevel, String tagName, XmlSerializer serializer )
        throws java.io.IOException
    {
        if ( startLevel != null )
        {
            serializer.startTag( NAMESPACE, tagName );
            if ( startLevel.getLevel() != null )
            {
                serializer.attribute( NAMESPACE, "level", startLevel.getLevel() );
            }
            if ( ( startLevel.getBundles() != null ) && ( startLevel.getBundles().size() > 0 ) )
            {
                for ( Iterator iter = startLevel.getBundles().iterator(); iter.hasNext(); )
                {
                    Bundle o = (Bundle) iter.next();
                    writeBundle( o, "bundle", serializer );
                }
            }
            serializer.endTag( NAMESPACE, tagName );
        }
    } //-- void writeStartLevel( StartLevel, String, XmlSerializer )

}
